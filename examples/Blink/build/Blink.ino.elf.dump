
Blink.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 98 00 	jmp	0x130	; 0x130 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_16>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_18>
  4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_19>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  58:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  5c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

00000068 <__vectors_328pb>:
void __vector_43() __attribute__((used, weak, alias("__bad_interrupt_328pb")));
void __vector_44() __attribute__((used, weak, alias("__bad_interrupt_328pb")));

void __vectors_328pb() __attribute__((used, naked, section(".vectors")));
void __vectors_328pb()
{
  68:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_26");
  asm("jmp __vector_27");
  6c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_28");
  70:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_29");
  74:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_30");
  78:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_31");
  7c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_32");
  80:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_33");
  84:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_34");
  88:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_35");
  8c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_36");
  90:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_37");
  94:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_38");
  98:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_39");
  9c:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_40");
  a0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_41");
  a4:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_42");
  a8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_43");
  ac:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  asm("jmp __vector_44");
  b0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__bad_interrupt_328pb>
  b4:	e4 00       	.word	0x00e4	; ????
  b6:	e7 00       	.word	0x00e7	; ????
  b8:	da 00       	.word	0x00da	; ????
  ba:	de 00       	.word	0x00de	; ????
  bc:	08 01       	movw	r0, r16
  be:	08 01       	movw	r0, r16
  c0:	eb 00       	.word	0x00eb	; ????
  c2:	ef 00       	.word	0x00ef	; ????
  c4:	f5 00       	.word	0x00f5	; ????
  c6:	f9 00       	.word	0x00f9	; ????
  c8:	08 01       	movw	r0, r16
  ca:	ff 00       	.word	0x00ff	; ????
  cc:	03 01       	movw	r0, r6

000000ce <__trampolines_end>:
  ce:	00 00       	nop
  d0:	00 00       	nop
  d2:	24 00       	.word	0x0024	; ????
  d4:	27 00       	.word	0x0027	; ????
  d6:	2a 00       	.word	0x002a	; ????
  d8:	2d 00       	.word	0x002d	; ????

000000da <port_to_output_PGM>:
  da:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

000000e6 <digital_pin_to_port_PGM>:
  e6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  f6:	03 03 03 03 05 05 05 05                             ........

000000fe <digital_pin_to_bit_mask_PGM>:
  fe:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
 10e:	04 08 10 20 04 08 01 02                             ... ....

00000116 <digital_pin_to_timer_PGM>:
 116:	09 0c 0a 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
	...

0000012e <__ctors_start>:
 12e:	0f 04       	cpc	r0, r15

00000130 <__ctors_end>:
 130:	11 24       	eor	r1, r1
 132:	1f be       	out	0x3f, r1	; 63
 134:	cf ef       	ldi	r28, 0xFF	; 255
 136:	d8 e0       	ldi	r29, 0x08	; 8
 138:	de bf       	out	0x3e, r29	; 62
 13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
 13c:	11 e0       	ldi	r17, 0x01	; 1
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	e2 e9       	ldi	r30, 0x92	; 146
 144:	f8 e0       	ldi	r31, 0x08	; 8
 146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
 148:	05 90       	lpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a6 31       	cpi	r26, 0x16	; 22
 14e:	b1 07       	cpc	r27, r17
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	a6 e1       	ldi	r26, 0x16	; 22
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
 15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
 15c:	ac 3b       	cpi	r26, 0xBC	; 188
 15e:	b2 07       	cpc	r27, r18
 160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>

00000162 <__do_global_ctors>:
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	c8 e9       	ldi	r28, 0x98	; 152
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	04 c0       	rjmp	.+8      	; 0x172 <__do_global_ctors+0x10>
 16a:	21 97       	sbiw	r28, 0x01	; 1
 16c:	fe 01       	movw	r30, r28
 16e:	0e 94 3c 04 	call	0x878	; 0x878 <__tablejump2__>
 172:	c7 39       	cpi	r28, 0x97	; 151
 174:	d1 07       	cpc	r29, r17
 176:	c9 f7       	brne	.-14     	; 0x16a <__do_global_ctors+0x8>
 178:	0e 94 41 03 	call	0x682	; 0x682 <main>
 17c:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000184 <digitalWrite.constprop.6>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 184:	ec e1       	ldi	r30, 0x1C	; 28
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	44 91       	lpm	r20, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 18a:	e4 e0       	ldi	r30, 0x04	; 4
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 190:	ec ee       	ldi	r30, 0xEC	; 236
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	94 91       	lpm	r25, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 196:	99 23       	and	r25, r25
 198:	09 f4       	brne	.+2      	; 0x19c <digitalWrite.constprop.6+0x18>
 19a:	4e c0       	rjmp	.+156    	; 0x238 <digitalWrite.constprop.6+0xb4>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 19c:	44 23       	and	r20, r20
 19e:	c1 f1       	breq	.+112    	; 0x210 <digitalWrite.constprop.6+0x8c>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	fa 01       	movw	r30, r20
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	ed 30       	cpi	r30, 0x0D	; 13
 1a8:	f1 05       	cpc	r31, r1
 1aa:	90 f5       	brcc	.+100    	; 0x210 <digitalWrite.constprop.6+0x8c>
 1ac:	e6 5a       	subi	r30, 0xA6	; 166
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	0c 94 3c 04 	jmp	0x878	; 0x878 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1b4:	30 91 80 00 	lds	r19, 0x0080
 1b8:	3f 77       	andi	r19, 0x7F	; 127
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <digitalWrite.constprop.6+0x3e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1bc:	30 91 80 00 	lds	r19, 0x0080
 1c0:	3f 7d       	andi	r19, 0xDF	; 223
 1c2:	30 93 80 00 	sts	0x0080, r19
 1c6:	24 c0       	rjmp	.+72     	; 0x210 <digitalWrite.constprop.6+0x8c>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1c8:	34 b5       	in	r19, 0x24	; 36
 1ca:	3f 77       	andi	r19, 0x7F	; 127
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <digitalWrite.constprop.6+0x4e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1ce:	34 b5       	in	r19, 0x24	; 36
 1d0:	3f 7d       	andi	r19, 0xDF	; 223
 1d2:	34 bd       	out	0x24, r19	; 36
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <digitalWrite.constprop.6+0x8c>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1d6:	30 91 b0 00 	lds	r19, 0x00B0
 1da:	3f 77       	andi	r19, 0x7F	; 127
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <digitalWrite.constprop.6+0x60>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1de:	30 91 b0 00 	lds	r19, 0x00B0
 1e2:	3f 7d       	andi	r19, 0xDF	; 223
 1e4:	30 93 b0 00 	sts	0x00B0, r19
 1e8:	13 c0       	rjmp	.+38     	; 0x210 <digitalWrite.constprop.6+0x8c>
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 1ea:	30 91 90 00 	lds	r19, 0x0090
 1ee:	3f 77       	andi	r19, 0x7F	; 127
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <digitalWrite.constprop.6+0x74>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 1f2:	30 91 90 00 	lds	r19, 0x0090
 1f6:	3f 7d       	andi	r19, 0xDF	; 223
 1f8:	30 93 90 00 	sts	0x0090, r19
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <digitalWrite.constprop.6+0x8c>
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
 1fe:	30 91 a0 00 	lds	r19, 0x00A0
 202:	3f 77       	andi	r19, 0x7F	; 127
 204:	03 c0       	rjmp	.+6      	; 0x20c <digitalWrite.constprop.6+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
 206:	30 91 a0 00 	lds	r19, 0x00A0
 20a:	3f 7d       	andi	r19, 0xDF	; 223
 20c:	30 93 a0 00 	sts	0x00A0, r19

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 210:	e9 2f       	mov	r30, r25
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	e6 52       	subi	r30, 0x26	; 38
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	a5 91       	lpm	r26, Z+
 21e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 220:	9f b7       	in	r25, 0x3f	; 63
	cli();
 222:	f8 94       	cli

	if (val == LOW) {
 224:	81 11       	cpse	r24, r1
 226:	04 c0       	rjmp	.+8      	; 0x230 <digitalWrite.constprop.6+0xac>
		*out &= ~bit;
 228:	8c 91       	ld	r24, X
 22a:	20 95       	com	r18
 22c:	28 23       	and	r18, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <digitalWrite.constprop.6+0xb0>
	} else {
		*out |= bit;
 230:	ec 91       	ld	r30, X
 232:	2e 2b       	or	r18, r30
 234:	2c 93       	st	X, r18
	}

	SREG = oldSREG;
 236:	9f bf       	out	0x3f, r25	; 63
 238:	08 95       	ret

0000023a <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 23a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 23c:	f8 94       	cli
	m = timer0_overflow_count;
 23e:	80 91 b8 01 	lds	r24, 0x01B8
 242:	90 91 b9 01 	lds	r25, 0x01B9
 246:	a0 91 ba 01 	lds	r26, 0x01BA
 24a:	b0 91 bb 01 	lds	r27, 0x01BB
#if defined(TCNT0)
	t = TCNT0;
 24e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 250:	a8 9b       	sbis	0x15, 0	; 21
 252:	05 c0       	rjmp	.+10     	; 0x25e <micros+0x24>
 254:	2f 3f       	cpi	r18, 0xFF	; 255
 256:	19 f0       	breq	.+6      	; 0x25e <micros+0x24>
		m++;
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	a1 1d       	adc	r26, r1
 25c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 25e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 260:	ba 2f       	mov	r27, r26
 262:	a9 2f       	mov	r26, r25
 264:	98 2f       	mov	r25, r24
 266:	88 27       	eor	r24, r24
 268:	82 0f       	add	r24, r18
 26a:	91 1d       	adc	r25, r1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	bc 01       	movw	r22, r24
 272:	cd 01       	movw	r24, r26
 274:	43 e0       	ldi	r20, 0x03	; 3
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	4a 95       	dec	r20
 280:	d1 f7       	brne	.-12     	; 0x276 <micros+0x3c>
}
 282:	08 95       	ret

00000284 <delay.constprop.7>:

void delay(unsigned long ms)
 284:	8f 92       	push	r8
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
{
	uint32_t start = micros();
 294:	0e 94 1d 01 	call	0x23a	; 0x23a <micros>
 298:	4b 01       	movw	r8, r22
 29a:	5c 01       	movw	r10, r24
 29c:	88 ee       	ldi	r24, 0xE8	; 232
 29e:	c8 2e       	mov	r12, r24
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	d8 2e       	mov	r13, r24
 2a4:	e1 2c       	mov	r14, r1
 2a6:	f1 2c       	mov	r15, r1

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <micros>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	88 19       	sub	r24, r8
 2b2:	99 09       	sbc	r25, r9
 2b4:	aa 09       	sbc	r26, r10
 2b6:	bb 09       	sbc	r27, r11
 2b8:	88 3e       	cpi	r24, 0xE8	; 232
 2ba:	93 40       	sbci	r25, 0x03	; 3
 2bc:	a1 05       	cpc	r26, r1
 2be:	b1 05       	cpc	r27, r1
 2c0:	98 f3       	brcs	.-26     	; 0x2a8 <delay.constprop.7+0x24>
			ms--;
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	c2 1a       	sub	r12, r18
 2c6:	d1 08       	sbc	r13, r1
 2c8:	e1 08       	sbc	r14, r1
 2ca:	f1 08       	sbc	r15, r1
			start += 1000;
 2cc:	88 ee       	ldi	r24, 0xE8	; 232
 2ce:	88 0e       	add	r8, r24
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	98 1e       	adc	r9, r24
 2d4:	a1 1c       	adc	r10, r1
 2d6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2d8:	c1 14       	cp	r12, r1
 2da:	d1 04       	cpc	r13, r1
 2dc:	e1 04       	cpc	r14, r1
 2de:	f1 04       	cpc	r15, r1
 2e0:	19 f7       	brne	.-58     	; 0x2a8 <delay.constprop.7+0x24>
			ms--;
			start += 1000;
		}
	}
}
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	af 90       	pop	r10
 2ee:	9f 90       	pop	r9
 2f0:	8f 90       	pop	r8
 2f2:	08 95       	ret

000002f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	6c 01       	movw	r12, r24
 306:	7a 01       	movw	r14, r20
 308:	8b 01       	movw	r16, r22
  size_t n = 0;
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 30e:	ce 15       	cp	r28, r14
 310:	df 05       	cpc	r29, r15
 312:	81 f0       	breq	.+32     	; 0x334 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 314:	d8 01       	movw	r26, r16
 316:	6d 91       	ld	r22, X+
 318:	8d 01       	movw	r16, r26
 31a:	d6 01       	movw	r26, r12
 31c:	ed 91       	ld	r30, X+
 31e:	fc 91       	ld	r31, X
 320:	01 90       	ld	r0, Z+
 322:	f0 81       	ld	r31, Z
 324:	e0 2d       	mov	r30, r0
 326:	c6 01       	movw	r24, r12
 328:	09 95       	icall
 32a:	89 2b       	or	r24, r25
 32c:	11 f0       	breq	.+4      	; 0x332 <_ZN5Print5writeEPKhj+0x3e>
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	ee cf       	rjmp	.-36     	; 0x30e <_ZN5Print5writeEPKhj+0x1a>
 332:	7e 01       	movw	r14, r28
    else break;
  }
  return n;
}
 334:	c7 01       	movw	r24, r14
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	08 95       	ret

00000348 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 348:	08 95       	ret

0000034a <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	08 95       	ret

00000350 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 350:	fc 01       	movw	r30, r24
 352:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 354:	44 8d       	ldd	r20, Z+28	; 0x1c
 356:	25 2f       	mov	r18, r21
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	84 2f       	mov	r24, r20
 35c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 35e:	82 1b       	sub	r24, r18
 360:	93 0b       	sbc	r25, r19
 362:	54 17       	cp	r21, r20
 364:	10 f0       	brcs	.+4      	; 0x36a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 366:	cf 96       	adiw	r24, 0x3f	; 63
 368:	08 95       	ret
  return tail - head - 1;
 36a:	01 97       	sbiw	r24, 0x01	; 1
}
 36c:	08 95       	ret

0000036e <_ZN14HardwareSerial4readEv>:
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 36e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 370:	91 8d       	ldd	r25, Z+25	; 0x19
 372:	82 8d       	ldd	r24, Z+26	; 0x1a
 374:	98 17       	cp	r25, r24
 376:	61 f0       	breq	.+24     	; 0x390 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 378:	82 8d       	ldd	r24, Z+26	; 0x1a
 37a:	df 01       	movw	r26, r30
 37c:	a8 0f       	add	r26, r24
 37e:	b1 1d       	adc	r27, r1
 380:	5d 96       	adiw	r26, 0x1d	; 29
 382:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 384:	92 8d       	ldd	r25, Z+26	; 0x1a
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	9f 73       	andi	r25, 0x3F	; 63
 38a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 394:	08 95       	ret

00000396 <_ZN14HardwareSerial4peekEv>:
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 396:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 398:	91 8d       	ldd	r25, Z+25	; 0x19
 39a:	82 8d       	ldd	r24, Z+26	; 0x1a
 39c:	98 17       	cp	r25, r24
 39e:	31 f0       	breq	.+12     	; 0x3ac <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3a0:	82 8d       	ldd	r24, Z+26	; 0x1a
 3a2:	e8 0f       	add	r30, r24
 3a4:	f1 1d       	adc	r31, r1
 3a6:	85 8d       	ldd	r24, Z+29	; 0x1d
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3b2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3b4:	91 8d       	ldd	r25, Z+25	; 0x19
 3b6:	22 8d       	ldd	r18, Z+26	; 0x1a
 3b8:	89 2f       	mov	r24, r25
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	80 5c       	subi	r24, 0xC0	; 192
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	82 1b       	sub	r24, r18
 3c2:	91 09       	sbc	r25, r1
}
 3c4:	8f 73       	andi	r24, 0x3F	; 63
 3c6:	99 27       	eor	r25, r25
 3c8:	08 95       	ret

000003ca <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 3ca:	86 e1       	ldi	r24, 0x16	; 22
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN14HardwareSerial9availableEv>
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	89 2b       	or	r24, r25
 3d6:	09 f4       	brne	.+2      	; 0x3da <_Z17Serial0_availablev+0x10>
 3d8:	20 e0       	ldi	r18, 0x00	; 0
}
 3da:	82 2f       	mov	r24, r18
 3dc:	08 95       	ret

000003de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3de:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3e0:	84 8d       	ldd	r24, Z+28	; 0x1c
 3e2:	df 01       	movw	r26, r30
 3e4:	a8 0f       	add	r26, r24
 3e6:	b1 1d       	adc	r27, r1
 3e8:	a3 5a       	subi	r26, 0xA3	; 163
 3ea:	bf 4f       	sbci	r27, 0xFF	; 255
 3ec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3ee:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	8f 73       	andi	r24, 0x3F	; 63
 3f6:	99 27       	eor	r25, r25
 3f8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 3fa:	a6 89       	ldd	r26, Z+22	; 0x16
 3fc:	b7 89       	ldd	r27, Z+23	; 0x17
 3fe:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 400:	a0 89       	ldd	r26, Z+16	; 0x10
 402:	b1 89       	ldd	r27, Z+17	; 0x11
 404:	8c 91       	ld	r24, X
 406:	83 70       	andi	r24, 0x03	; 3
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 40c:	93 8d       	ldd	r25, Z+27	; 0x1b
 40e:	84 8d       	ldd	r24, Z+28	; 0x1c
 410:	98 13       	cpse	r25, r24
 412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 414:	02 88       	ldd	r0, Z+18	; 0x12
 416:	f3 89       	ldd	r31, Z+19	; 0x13
 418:	e0 2d       	mov	r30, r0
 41a:	80 81       	ld	r24, Z
 41c:	8f 7d       	andi	r24, 0xDF	; 223
 41e:	80 83       	st	Z, r24
 420:	08 95       	ret

00000422 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
  _written = true;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 434:	9b 8d       	ldd	r25, Y+27	; 0x1b
 436:	8c 8d       	ldd	r24, Y+28	; 0x1c
 438:	98 13       	cpse	r25, r24
 43a:	05 c0       	rjmp	.+10     	; 0x446 <_ZN14HardwareSerial5writeEh+0x24>
 43c:	e8 89       	ldd	r30, Y+16	; 0x10
 43e:	f9 89       	ldd	r31, Y+17	; 0x11
 440:	80 81       	ld	r24, Z
 442:	85 fd       	sbrc	r24, 5
 444:	26 c0       	rjmp	.+76     	; 0x492 <_ZN14HardwareSerial5writeEh+0x70>
 446:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 448:	0b 8d       	ldd	r16, Y+27	; 0x1b
 44a:	10 e0       	ldi	r17, 0x00	; 0
 44c:	0f 5f       	subi	r16, 0xFF	; 255
 44e:	1f 4f       	sbci	r17, 0xFF	; 255
 450:	0f 73       	andi	r16, 0x3F	; 63
 452:	11 27       	eor	r17, r17
 454:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 456:	8c 8d       	ldd	r24, Y+28	; 0x1c
 458:	e8 12       	cpse	r14, r24
 45a:	0c c0       	rjmp	.+24     	; 0x474 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	07 fc       	sbrc	r0, 7
 460:	fa cf       	rjmp	.-12     	; 0x456 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 462:	e8 89       	ldd	r30, Y+16	; 0x10
 464:	f9 89       	ldd	r31, Y+17	; 0x11
 466:	80 81       	ld	r24, Z
 468:	85 ff       	sbrs	r24, 5
 46a:	f5 cf       	rjmp	.-22     	; 0x456 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 472:	f1 cf       	rjmp	.-30     	; 0x456 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 474:	8b 8d       	ldd	r24, Y+27	; 0x1b
 476:	fe 01       	movw	r30, r28
 478:	e8 0f       	add	r30, r24
 47a:	f1 1d       	adc	r31, r1
 47c:	e3 5a       	subi	r30, 0xA3	; 163
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 482:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 484:	f8 94       	cli
    _tx_buffer_head = i;
 486:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 488:	ea 89       	ldd	r30, Y+18	; 0x12
 48a:	fb 89       	ldd	r31, Y+19	; 0x13
 48c:	80 81       	ld	r24, Z
 48e:	80 62       	ori	r24, 0x20	; 32
 490:	0a c0       	rjmp	.+20     	; 0x4a6 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 492:	9f b7       	in	r25, 0x3f	; 63
 494:	f8 94       	cli
      *_udr = c;
 496:	ee 89       	ldd	r30, Y+22	; 0x16
 498:	ff 89       	ldd	r31, Y+23	; 0x17
 49a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 49c:	e8 89       	ldd	r30, Y+16	; 0x10
 49e:	f9 89       	ldd	r31, Y+17	; 0x11
 4a0:	80 81       	ld	r24, Z
 4a2:	83 70       	andi	r24, 0x03	; 3
 4a4:	80 64       	ori	r24, 0x40	; 64
 4a6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4a8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	08 95       	ret

000004bc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4c2:	88 8d       	ldd	r24, Y+24	; 0x18
 4c4:	88 23       	and	r24, r24
 4c6:	c9 f0       	breq	.+50     	; 0x4fa <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4c8:	ea 89       	ldd	r30, Y+18	; 0x12
 4ca:	fb 89       	ldd	r31, Y+19	; 0x13
 4cc:	80 81       	ld	r24, Z
 4ce:	85 fd       	sbrc	r24, 5
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <_ZN14HardwareSerial5flushEv+0x20>
 4d2:	a8 89       	ldd	r26, Y+16	; 0x10
 4d4:	b9 89       	ldd	r27, Y+17	; 0x11
 4d6:	8c 91       	ld	r24, X
 4d8:	86 fd       	sbrc	r24, 6
 4da:	0f c0       	rjmp	.+30     	; 0x4fa <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	07 fc       	sbrc	r0, 7
 4e0:	f5 cf       	rjmp	.-22     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
 4e2:	80 81       	ld	r24, Z
 4e4:	85 ff       	sbrs	r24, 5
 4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4e8:	a8 89       	ldd	r26, Y+16	; 0x10
 4ea:	b9 89       	ldd	r27, Y+17	; 0x11
 4ec:	8c 91       	ld	r24, X
 4ee:	85 ff       	sbrs	r24, 5
 4f0:	ed cf       	rjmp	.-38     	; 0x4cc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4f2:	ce 01       	movw	r24, r28
 4f4:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4f8:	e7 cf       	rjmp	.-50     	; 0x4c8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	89 2b       	or	r24, r25
 506:	21 f0       	breq	.+8      	; 0x510 <_Z14serialEventRunv+0x10>
 508:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_Z17Serial0_availablev>
 50c:	81 11       	cpse	r24, r1
 50e:	0d c0       	rjmp	.+26     	; 0x52a <_Z14serialEventRunv+0x2a>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	89 2b       	or	r24, r25
 516:	71 f0       	breq	.+28     	; 0x534 <_Z14serialEventRunv+0x34>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	89 2b       	or	r24, r25
 51e:	51 f0       	breq	.+20     	; 0x534 <_Z14serialEventRunv+0x34>
 520:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 524:	81 11       	cpse	r24, r1
 526:	04 c0       	rjmp	.+8      	; 0x530 <_Z14serialEventRunv+0x30>
 528:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 52a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 52e:	f0 cf       	rjmp	.-32     	; 0x510 <_Z14serialEventRunv+0x10>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 530:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 534:	08 95       	ret

00000536 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
 536:	0e 94 42 04 	call	0x884	; 0x884 <abort>

0000053a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 550:	80 91 b4 01 	lds	r24, 0x01B4
 554:	90 91 b5 01 	lds	r25, 0x01B5
 558:	a0 91 b6 01 	lds	r26, 0x01B6
 55c:	b0 91 b7 01 	lds	r27, 0x01B7
	unsigned char f = timer0_fract;
 560:	30 91 b3 01 	lds	r19, 0x01B3

	m += MILLIS_INC;
	f += FRACT_INC;
 564:	26 e0       	ldi	r18, 0x06	; 6
 566:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 568:	2d 37       	cpi	r18, 0x7D	; 125
 56a:	20 f4       	brcc	.+8      	; 0x574 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 56c:	02 96       	adiw	r24, 0x02	; 2
 56e:	a1 1d       	adc	r26, r1
 570:	b1 1d       	adc	r27, r1
 572:	05 c0       	rjmp	.+10     	; 0x57e <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 574:	29 e8       	ldi	r18, 0x89	; 137
 576:	23 0f       	add	r18, r19
		m += 1;
 578:	03 96       	adiw	r24, 0x03	; 3
 57a:	a1 1d       	adc	r26, r1
 57c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 57e:	20 93 b3 01 	sts	0x01B3, r18
	timer0_millis = m;
 582:	80 93 b4 01 	sts	0x01B4, r24
 586:	90 93 b5 01 	sts	0x01B5, r25
 58a:	a0 93 b6 01 	sts	0x01B6, r26
 58e:	b0 93 b7 01 	sts	0x01B7, r27
	timer0_overflow_count++;
 592:	80 91 b8 01 	lds	r24, 0x01B8
 596:	90 91 b9 01 	lds	r25, 0x01B9
 59a:	a0 91 ba 01 	lds	r26, 0x01BA
 59e:	b0 91 bb 01 	lds	r27, 0x01BB
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	a1 1d       	adc	r26, r1
 5a6:	b1 1d       	adc	r27, r1
 5a8:	80 93 b8 01 	sts	0x01B8, r24
 5ac:	90 93 b9 01 	sts	0x01B9, r25
 5b0:	a0 93 ba 01 	sts	0x01BA, r26
 5b4:	b0 93 bb 01 	sts	0x01BB, r27
}
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5f0:	86 e1       	ldi	r24, 0x16	; 22
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	2f 93       	push	r18
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 62e:	e0 91 26 01 	lds	r30, 0x0126
 632:	f0 91 27 01 	lds	r31, 0x0127
 636:	80 81       	ld	r24, Z
 638:	e0 91 2c 01 	lds	r30, 0x012C
 63c:	f0 91 2d 01 	lds	r31, 0x012D
 640:	82 fd       	sbrc	r24, 2
 642:	12 c0       	rjmp	.+36     	; 0x668 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 644:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 646:	80 91 2f 01 	lds	r24, 0x012F
 64a:	8f 5f       	subi	r24, 0xFF	; 255
 64c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 64e:	20 91 30 01 	lds	r18, 0x0130
 652:	82 17       	cp	r24, r18
 654:	51 f0       	breq	.+20     	; 0x66a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 656:	e0 91 2f 01 	lds	r30, 0x012F
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	ea 5e       	subi	r30, 0xEA	; 234
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 662:	80 93 2f 01 	sts	0x012F, r24
 666:	01 c0       	rjmp	.+2      	; 0x66a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 668:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__bad_interrupt_328pb>:
#ifdef __cplusplus
extern "C" {
#endif

void __bad_interrupt_328pb() __attribute__((used, naked));
void __bad_interrupt_328pb(){ asm("jmp __bad_interrupt"); }
 67e:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

00000682 <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 682:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 684:	84 b5       	in	r24, 0x24	; 36
 686:	82 60       	ori	r24, 0x02	; 2
 688:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 68a:	84 b5       	in	r24, 0x24	; 36
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 690:	85 b5       	in	r24, 0x25	; 37
 692:	82 60       	ori	r24, 0x02	; 2
 694:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 696:	85 b5       	in	r24, 0x25	; 37
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 69c:	80 91 6e 00 	lds	r24, 0x006E
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	80 93 6e 00 	sts	0x006E, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6a6:	10 92 81 00 	sts	0x0081, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6aa:	80 91 81 00 	lds	r24, 0x0081
 6ae:	82 60       	ori	r24, 0x02	; 2
 6b0:	80 93 81 00 	sts	0x0081, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6b4:	80 91 81 00 	lds	r24, 0x0081
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	80 93 81 00 	sts	0x0081, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6be:	80 91 80 00 	lds	r24, 0x0080
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	80 93 80 00 	sts	0x0080, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6c8:	80 91 b1 00 	lds	r24, 0x00B1
 6cc:	84 60       	ori	r24, 0x04	; 4
 6ce:	80 93 b1 00 	sts	0x00B1, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6d2:	80 91 b0 00 	lds	r24, 0x00B0
 6d6:	81 60       	ori	r24, 0x01	; 1
 6d8:	80 93 b0 00 	sts	0x00B0, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 6dc:	80 91 91 00 	lds	r24, 0x0091
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	80 93 91 00 	sts	0x0091, r24
	sbi(TCCR3B, CS30);
 6e6:	80 91 91 00 	lds	r24, 0x0091
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	80 93 91 00 	sts	0x0091, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 6f0:	80 91 90 00 	lds	r24, 0x0090
 6f4:	81 60       	ori	r24, 0x01	; 1
 6f6:	80 93 90 00 	sts	0x0090, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
 6fa:	80 91 a1 00 	lds	r24, 0x00A1
 6fe:	82 60       	ori	r24, 0x02	; 2
 700:	80 93 a1 00 	sts	0x00A1, r24
	sbi(TCCR4B, CS40);
 704:	80 91 a1 00 	lds	r24, 0x00A1
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	80 93 a1 00 	sts	0x00A1, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
 70e:	80 91 a0 00 	lds	r24, 0x00A0
 712:	81 60       	ori	r24, 0x01	; 1
 714:	80 93 a0 00 	sts	0x00A0, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
 718:	80 91 7a 00 	lds	r24, 0x007A
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	80 93 7a 00 	sts	0x007A, r24
		sbi(ADCSRA, ADPS1);
 722:	80 91 7a 00 	lds	r24, 0x007A
 726:	82 60       	ori	r24, 0x02	; 2
 728:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADPS0);
 72c:	80 91 7a 00 	lds	r24, 0x007A
 730:	8e 7f       	andi	r24, 0xFE	; 254
 732:	80 93 7a 00 	sts	0x007A, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 736:	80 91 7a 00 	lds	r24, 0x007A
 73a:	80 68       	ori	r24, 0x80	; 128
 73c:	80 93 7a 00 	sts	0x007A, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 740:	10 92 c1 00 	sts	0x00C1, r1
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 744:	e4 e0       	ldi	r30, 0x04	; 4
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
 74a:	ec ee       	ldi	r30, 0xEC	; 236
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 750:	88 23       	and	r24, r24
 752:	99 f0       	breq	.+38     	; 0x77a <main+0xf8>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	fc 01       	movw	r30, r24
 75c:	e2 53       	subi	r30, 0x32	; 50
 75e:	ff 4f       	sbci	r31, 0xFF	; 255
 760:	a5 91       	lpm	r26, Z+
 762:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 764:	fc 01       	movw	r30, r24
 766:	e6 52       	subi	r30, 0x26	; 38
 768:	ff 4f       	sbci	r31, 0xFF	; 255
 76a:	85 91       	lpm	r24, Z+
 76c:	94 91       	lpm	r25, Z+
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 76e:	8f b7       	in	r24, 0x3f	; 63
                cli();
 770:	f8 94       	cli
		*reg |= bit;
 772:	ec 91       	ld	r30, X
 774:	e2 2b       	or	r30, r18
 776:	ec 93       	st	X, r30
		SREG = oldSREG;
 778:	8f bf       	out	0x3f, r24	; 63

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 77a:	e0 91 26 01 	lds	r30, 0x0126
 77e:	f0 91 27 01 	lds	r31, 0x0127
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	80 83       	st	Z, r24
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 786:	e0 91 22 01 	lds	r30, 0x0122
 78a:	f0 91 23 01 	lds	r31, 0x0123
 78e:	10 82       	st	Z, r1
  *_ubrrl = baud_setting;
 790:	e0 91 24 01 	lds	r30, 0x0124
 794:	f0 91 25 01 	lds	r31, 0x0125
 798:	88 e0       	ldi	r24, 0x08	; 8
 79a:	80 83       	st	Z, r24

  _written = false;
 79c:	10 92 2e 01 	sts	0x012E, r1

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 7a0:	e0 91 2a 01 	lds	r30, 0x012A
 7a4:	f0 91 2b 01 	lds	r31, 0x012B
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, RXEN0);
 7ac:	e0 91 28 01 	lds	r30, 0x0128
 7b0:	f0 91 29 01 	lds	r31, 0x0129
 7b4:	80 81       	ld	r24, Z
 7b6:	80 61       	ori	r24, 0x10	; 16
 7b8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 7ba:	e0 91 28 01 	lds	r30, 0x0128
 7be:	f0 91 29 01 	lds	r31, 0x0129
 7c2:	80 81       	ld	r24, Z
 7c4:	88 60       	ori	r24, 0x08	; 8
 7c6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 7c8:	e0 91 28 01 	lds	r30, 0x0128
 7cc:	f0 91 29 01 	lds	r31, 0x0129
 7d0:	80 81       	ld	r24, Z
 7d2:	80 68       	ori	r24, 0x80	; 128
 7d4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 7d6:	e0 91 28 01 	lds	r30, 0x0128
 7da:	f0 91 29 01 	lds	r31, 0x0129
 7de:	80 81       	ld	r24, Z
 7e0:	8f 7d       	andi	r24, 0xDF	; 223
 7e2:	80 83       	st	Z, r24
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 7e4:	41 e0       	ldi	r20, 0x01	; 1
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	62 e1       	ldi	r22, 0x12	; 18
 7ea:	71 e0       	ldi	r23, 0x01	; 1
 7ec:	86 e1       	ldi	r24, 0x16	; 22
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5writeEPKhj>
  Serial.print("V");
}

// the loop function runs over and over again forever
void loop() {
  digitalWrite(LED, HIGH);   // turn the LED on (HIGH is the voltage level)
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	0e 94 c2 00 	call	0x184	; 0x184 <digitalWrite.constprop.6>
  delay(1000);                       // wait for a second
 7fa:	0e 94 42 01 	call	0x284	; 0x284 <delay.constprop.7>
  digitalWrite(LED, LOW);    // turn the LED off by making the voltage LOW
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	0e 94 c2 00 	call	0x184	; 0x184 <digitalWrite.constprop.6>
  delay(1000);                       // wait for a second
 804:	0e 94 42 01 	call	0x284	; 0x284 <delay.constprop.7>
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	64 e1       	ldi	r22, 0x14	; 20
 80e:	71 e0       	ldi	r23, 0x01	; 1
 810:	86 e1       	ldi	r24, 0x16	; 22
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN5Print5writeEPKhj>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 818:	0e 94 80 02 	call	0x500	; 0x500 <_Z14serialEventRunv>
 81c:	eb cf       	rjmp	.-42     	; 0x7f4 <main+0x172>

0000081e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 81e:	e6 e1       	ldi	r30, 0x16	; 22
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	13 82       	std	Z+3, r1	; 0x03
 824:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 826:	88 ee       	ldi	r24, 0xE8	; 232
 828:	93 e0       	ldi	r25, 0x03	; 3
 82a:	a0 e0       	ldi	r26, 0x00	; 0
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	84 83       	std	Z+4, r24	; 0x04
 830:	95 83       	std	Z+5, r25	; 0x05
 832:	a6 83       	std	Z+6, r26	; 0x06
 834:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 836:	84 e0       	ldi	r24, 0x04	; 4
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	91 83       	std	Z+1, r25	; 0x01
 83c:	80 83       	st	Z, r24
 83e:	85 ec       	ldi	r24, 0xC5	; 197
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	95 87       	std	Z+13, r25	; 0x0d
 844:	84 87       	std	Z+12, r24	; 0x0c
 846:	84 ec       	ldi	r24, 0xC4	; 196
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	97 87       	std	Z+15, r25	; 0x0f
 84c:	86 87       	std	Z+14, r24	; 0x0e
 84e:	80 ec       	ldi	r24, 0xC0	; 192
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	91 8b       	std	Z+17, r25	; 0x11
 854:	80 8b       	std	Z+16, r24	; 0x10
 856:	81 ec       	ldi	r24, 0xC1	; 193
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	93 8b       	std	Z+19, r25	; 0x13
 85c:	82 8b       	std	Z+18, r24	; 0x12
 85e:	82 ec       	ldi	r24, 0xC2	; 194
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	95 8b       	std	Z+21, r25	; 0x15
 864:	84 8b       	std	Z+20, r24	; 0x14
 866:	86 ec       	ldi	r24, 0xC6	; 198
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	97 8b       	std	Z+23, r25	; 0x17
 86c:	86 8b       	std	Z+22, r24	; 0x16
 86e:	11 8e       	std	Z+25, r1	; 0x19
 870:	12 8e       	std	Z+26, r1	; 0x1a
 872:	13 8e       	std	Z+27, r1	; 0x1b
 874:	14 8e       	std	Z+28, r1	; 0x1c
 876:	08 95       	ret

00000878 <__tablejump2__>:
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	05 90       	lpm	r0, Z+
 87e:	f4 91       	lpm	r31, Z+
 880:	e0 2d       	mov	r30, r0
 882:	09 94       	ijmp

00000884 <abort>:
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	f8 94       	cli
 88a:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
