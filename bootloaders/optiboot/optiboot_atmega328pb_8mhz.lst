
optiboot_atmega328pb_8mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00007d00  00007d00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000026a  2**0
                  CONTENTS, READONLY
  3 .comment      00000011  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f5  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000220  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038b  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000186  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000357  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000012b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007d00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7d00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7d02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7d04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    7d06:	81 ff       	sbrs	r24, 1
    7d08:	fe d0       	rcall	.+508    	; 0x7f06 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7d0a:	85 e0       	ldi	r24, 0x05	; 5
    7d0c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#endif
#ifndef SOFT_UART
  // Turn on the pull-up resistor for RX.
  PORTD |= (1 << 0);
    7d10:	58 9a       	sbi	0x0b, 0	; 11
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7d12:	82 e0       	ldi	r24, 0x02	; 2
    7d14:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7d18:	88 e1       	ldi	r24, 0x18	; 24
    7d1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7d1e:	96 e0       	ldi	r25, 0x06	; 6
    7d20:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7d24:	90 e1       	ldi	r25, 0x10	; 16
    7d26:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7d2a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
    7d2e:	8e e0       	ldi	r24, 0x0E	; 14
    7d30:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7d34:	25 9a       	sbi	0x04, 5	; 4
    7d36:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7d38:	28 e1       	ldi	r18, 0x18	; 24
    7d3a:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7d3c:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7d3e:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7d42:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7d46:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7d48:	b0 9b       	sbis	0x16, 0	; 22
    7d4a:	fe cf       	rjmp	.-4      	; 0x7d48 <main+0x48>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7d4c:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7d4e:	a8 95       	wdr
    7d50:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7d52:	a9 f7       	brne	.-22     	; 0x7d3e <main+0x3e>
    7d54:	c0 e0       	ldi	r28, 0x00	; 0
    7d56:	d0 e0       	ldi	r29, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7d58:	08 e1       	ldi	r16, 0x18	; 24
  WDTCSR = x;
    7d5a:	38 e0       	ldi	r19, 0x08	; 8
    7d5c:	f3 2e       	mov	r15, r19
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d5e:	ee 24       	eor	r14, r14
    7d60:	e3 94       	inc	r14
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7d62:	45 e0       	ldi	r20, 0x05	; 5
    7d64:	b4 2e       	mov	r11, r20
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7d66:	51 e1       	ldi	r21, 0x11	; 17
    7d68:	a5 2e       	mov	r10, r21
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7d6a:	13 e0       	ldi	r17, 0x03	; 3
    7d6c:	a7 d0       	rcall	.+334    	; 0x7ebc <getch>

    if(ch == STK_GET_PARAMETER) {
    7d6e:	81 34       	cpi	r24, 0x41	; 65
      unsigned char which = getch();
    7d70:	91 f4       	brne	.+36     	; 0x7d96 <main+0x96>
    7d72:	a4 d0       	rcall	.+328    	; 0x7ebc <getch>
      verifySpace();
    7d74:	d8 2e       	mov	r13, r24
    7d76:	ae d0       	rcall	.+348    	; 0x7ed4 <verifySpace>
      if (which == 0x82) {
    7d78:	82 e8       	ldi	r24, 0x82	; 130
    7d7a:	d8 12       	cpse	r13, r24
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7d7c:	03 c0       	rjmp	.+6      	; 0x7d84 <main+0x84>
    7d7e:	84 e0       	ldi	r24, 0x04	; 4
    7d80:	96 d0       	rcall	.+300    	; 0x7eae <putch>
      } else if (which == 0x81) {
    7d82:	92 c0       	rjmp	.+292    	; 0x7ea8 <main+0x1a8>
    7d84:	e1 e8       	ldi	r30, 0x81	; 129
	  putch(OPTIBOOT_MAJVER);
    7d86:	de 12       	cpse	r13, r30
    7d88:	03 c0       	rjmp	.+6      	; 0x7d90 <main+0x90>
    7d8a:	84 e0       	ldi	r24, 0x04	; 4
    7d8c:	90 d0       	rcall	.+288    	; 0x7eae <putch>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7d8e:	8c c0       	rjmp	.+280    	; 0x7ea8 <main+0x1a8>
    7d90:	83 e0       	ldi	r24, 0x03	; 3
    7d92:	8d d0       	rcall	.+282    	; 0x7eae <putch>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7d94:	89 c0       	rjmp	.+274    	; 0x7ea8 <main+0x1a8>
      // SET DEVICE is ignored
      getNch(20);
    7d96:	82 34       	cpi	r24, 0x42	; 66
    7d98:	19 f4       	brne	.+6      	; 0x7da0 <main+0xa0>
    7d9a:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7d9c:	a7 d0       	rcall	.+334    	; 0x7eec <getNch>
      // SET DEVICE EXT is ignored
      getNch(5);
    7d9e:	84 c0       	rjmp	.+264    	; 0x7ea8 <main+0x1a8>
    7da0:	85 34       	cpi	r24, 0x45	; 69
    7da2:	19 f4       	brne	.+6      	; 0x7daa <main+0xaa>
    7da4:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7da6:	a2 d0       	rcall	.+324    	; 0x7eec <getNch>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7da8:	7f c0       	rjmp	.+254    	; 0x7ea8 <main+0x1a8>
    7daa:	85 35       	cpi	r24, 0x55	; 85
    7dac:	49 f4       	brne	.+18     	; 0x7dc0 <main+0xc0>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7dae:	86 d0       	rcall	.+268    	; 0x7ebc <getch>
    7db0:	c8 2f       	mov	r28, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7db2:	84 d0       	rcall	.+264    	; 0x7ebc <getch>
    7db4:	d0 e0       	ldi	r29, 0x00	; 0
      address = newAddress;
      verifySpace();
    7db6:	d8 2b       	or	r29, r24
    7db8:	cc 0f       	add	r28, r28
    }
    else if(ch == STK_UNIVERSAL) {
    7dba:	dd 1f       	adc	r29, r29
      // UNIVERSAL command is ignored
      getNch(4);
    7dbc:	8b d0       	rcall	.+278    	; 0x7ed4 <verifySpace>
    7dbe:	74 c0       	rjmp	.+232    	; 0x7ea8 <main+0x1a8>
    7dc0:	86 35       	cpi	r24, 0x56	; 86
      putch(0x00);
    7dc2:	29 f4       	brne	.+10     	; 0x7dce <main+0xce>
    7dc4:	84 e0       	ldi	r24, 0x04	; 4
    7dc6:	92 d0       	rcall	.+292    	; 0x7eec <getNch>
    7dc8:	80 e0       	ldi	r24, 0x00	; 0
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7dca:	71 d0       	rcall	.+226    	; 0x7eae <putch>
    7dcc:	6d c0       	rjmp	.+218    	; 0x7ea8 <main+0x1a8>
    7dce:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7dd0:	09 f0       	breq	.+2      	; 0x7dd4 <main+0xd4>
    7dd2:	3f c0       	rjmp	.+126    	; 0x7e52 <main+0x152>
      length = getch();
    7dd4:	73 d0       	rcall	.+230    	; 0x7ebc <getch>
    7dd6:	72 d0       	rcall	.+228    	; 0x7ebc <getch>
      getch();
    7dd8:	98 2e       	mov	r9, r24
    7dda:	70 d0       	rcall	.+224    	; 0x7ebc <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ddc:	c1 15       	cp	r28, r1
    7dde:	f0 e7       	ldi	r31, 0x70	; 112
    7de0:	df 07       	cpc	r29, r31
    7de2:	38 f4       	brcc	.+14     	; 0x7df2 <main+0xf2>
    7de4:	fe 01       	movw	r30, r28
    7de6:	17 bf       	out	0x37, r17	; 55
    7de8:	e8 95       	spm
    7dea:	c1 2c       	mov	r12, r1
    7dec:	dd 24       	eor	r13, r13
    7dee:	d3 94       	inc	r13
    7df0:	03 c0       	rjmp	.+6      	; 0x7df8 <main+0xf8>
    7df2:	c1 2c       	mov	r12, r1
    7df4:	dd 24       	eor	r13, r13

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7df6:	d3 94       	inc	r13
    7df8:	61 d0       	rcall	.+194    	; 0x7ebc <getch>
    7dfa:	f6 01       	movw	r30, r12
    7dfc:	81 93       	st	Z+, r24
    7dfe:	6f 01       	movw	r12, r30
      while (--length);
    7e00:	9e 12       	cpse	r9, r30
    7e02:	fa cf       	rjmp	.-12     	; 0x7df8 <main+0xf8>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e04:	c1 15       	cp	r28, r1
    7e06:	f0 e7       	ldi	r31, 0x70	; 112
    7e08:	df 07       	cpc	r29, r31
    7e0a:	18 f0       	brcs	.+6      	; 0x7e12 <main+0x112>
    7e0c:	fe 01       	movw	r30, r28
    7e0e:	17 bf       	out	0x37, r17	; 55
    7e10:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7e12:	60 d0       	rcall	.+192    	; 0x7ed4 <verifySpace>
    7e14:	07 b6       	in	r0, 0x37	; 55

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7e16:	00 fc       	sbrc	r0, 0
    7e18:	fd cf       	rjmp	.-6      	; 0x7e14 <main+0x114>
    7e1a:	fe 01       	movw	r30, r28
    7e1c:	a0 e0       	ldi	r26, 0x00	; 0
    7e1e:	b1 e0       	ldi	r27, 0x01	; 1
    7e20:	8c 91       	ld	r24, X
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7e22:	11 96       	adiw	r26, 0x01	; 1
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e24:	2c 91       	ld	r18, X
    7e26:	11 97       	sbiw	r26, 0x01	; 1
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	92 2b       	or	r25, r18
    7e2c:	0c 01       	movw	r0, r24
    7e2e:	e7 be       	out	0x37, r14	; 55
    7e30:	e8 95       	spm
    7e32:	11 24       	eor	r1, r1
        addrPtr += 2;
    7e34:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    7e36:	12 96       	adiw	r26, 0x02	; 2
    7e38:	a0 38       	cpi	r26, 0x80	; 128
    7e3a:	81 e0       	ldi	r24, 0x01	; 1

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e3c:	b8 07       	cpc	r27, r24
    7e3e:	81 f7       	brne	.-32     	; 0x7e20 <main+0x120>
    7e40:	fe 01       	movw	r30, r28
      boot_spm_busy_wait();
    7e42:	b7 be       	out	0x37, r11	; 55
    7e44:	e8 95       	spm

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e46:	07 b6       	in	r0, 0x37	; 55
    7e48:	00 fc       	sbrc	r0, 0
    7e4a:	fd cf       	rjmp	.-6      	; 0x7e46 <main+0x146>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7e4c:	a7 be       	out	0x37, r10	; 55
    7e4e:	e8 95       	spm
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7e50:	2b c0       	rjmp	.+86     	; 0x7ea8 <main+0x1a8>
    7e52:	84 37       	cpi	r24, 0x74	; 116
      length = getch();
    7e54:	b1 f4       	brne	.+44     	; 0x7e82 <main+0x182>
    7e56:	32 d0       	rcall	.+100    	; 0x7ebc <getch>
    7e58:	31 d0       	rcall	.+98     	; 0x7ebc <getch>
      getch();
    7e5a:	98 2e       	mov	r9, r24

      verifySpace();
    7e5c:	2f d0       	rcall	.+94     	; 0x7ebc <getch>
    7e5e:	3a d0       	rcall	.+116    	; 0x7ed4 <verifySpace>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7e60:	89 2c       	mov	r8, r9
    7e62:	fe 01       	movw	r30, r28
    7e64:	6f 01       	movw	r12, r30
    7e66:	8f ef       	ldi	r24, 0xFF	; 255
    7e68:	c8 1a       	sub	r12, r24
    7e6a:	d8 0a       	sbc	r13, r24
      while (--length);
    7e6c:	84 91       	lpm	r24, Z
    7e6e:	1f d0       	rcall	.+62     	; 0x7eae <putch>
    7e70:	8a 94       	dec	r8
    7e72:	f6 01       	movw	r30, r12
    7e74:	81 10       	cpse	r8, r1
    7e76:	f6 cf       	rjmp	.-20     	; 0x7e64 <main+0x164>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7e78:	21 96       	adiw	r28, 0x01	; 1
    7e7a:	9a 94       	dec	r9
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7e7c:	c9 0d       	add	r28, r9
    7e7e:	d1 1d       	adc	r29, r1
      putch(SIGNATURE_0);
    7e80:	13 c0       	rjmp	.+38     	; 0x7ea8 <main+0x1a8>
    7e82:	85 37       	cpi	r24, 0x75	; 117
    7e84:	41 f4       	brne	.+16     	; 0x7e96 <main+0x196>
      putch(SIGNATURE_1);
    7e86:	26 d0       	rcall	.+76     	; 0x7ed4 <verifySpace>
    7e88:	8e e1       	ldi	r24, 0x1E	; 30
    7e8a:	11 d0       	rcall	.+34     	; 0x7eae <putch>
      putch(SIGNATURE_2);
    7e8c:	85 e9       	ldi	r24, 0x95	; 149
    7e8e:	0f d0       	rcall	.+30     	; 0x7eae <putch>
    7e90:	86 e1       	ldi	r24, 0x16	; 22
    7e92:	0d d0       	rcall	.+26     	; 0x7eae <putch>
    }
    else if (ch == 'Q') {
    7e94:	09 c0       	rjmp	.+18     	; 0x7ea8 <main+0x1a8>
    7e96:	81 35       	cpi	r24, 0x51	; 81
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e98:	31 f4       	brne	.+12     	; 0x7ea6 <main+0x1a6>
    7e9a:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
    7e9e:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    7ea2:	18 d0       	rcall	.+48     	; 0x7ed4 <verifySpace>
    7ea4:	01 c0       	rjmp	.+2      	; 0x7ea8 <main+0x1a8>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7ea6:	16 d0       	rcall	.+44     	; 0x7ed4 <verifySpace>
    7ea8:	80 e1       	ldi	r24, 0x10	; 16
    }
    putch(STK_OK);
    7eaa:	01 d0       	rcall	.+2      	; 0x7eae <putch>
    7eac:	5f cf       	rjmp	.-322    	; 0x7d6c <main+0x6c>

00007eae <putch>:
    7eae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7eb2:	95 ff       	sbrs	r25, 5
    7eb4:	fc cf       	rjmp	.-8      	; 0x7eae <putch>
  UDR0 = ch;
    7eb6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7eba:	08 95       	ret

00007ebc <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7ebc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7ec0:	87 ff       	sbrs	r24, 7
    7ec2:	fc cf       	rjmp	.-8      	; 0x7ebc <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7ec4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7ec8:	84 fd       	sbrc	r24, 4
    7eca:	01 c0       	rjmp	.+2      	; 0x7ece <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7ecc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7ece:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7ed2:	08 95       	ret

00007ed4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7ed4:	f3 df       	rcall	.-26     	; 0x7ebc <getch>
    7ed6:	80 32       	cpi	r24, 0x20	; 32
    7ed8:	39 f0       	breq	.+14     	; 0x7ee8 <verifySpace+0x14>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7eda:	88 e1       	ldi	r24, 0x18	; 24
    7edc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  WDTCSR = x;
    7ee0:	88 e0       	ldi	r24, 0x08	; 8
    7ee2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7ee6:	ff cf       	rjmp	.-2      	; 0x7ee6 <verifySpace+0x12>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7ee8:	84 e1       	ldi	r24, 0x14	; 20
    7eea:	e1 cf       	rjmp	.-62     	; 0x7eae <putch>

00007eec <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7eec:	cf 93       	push	r28
  do getch(); while (--count);
    7eee:	c8 2f       	mov	r28, r24
    7ef0:	e5 df       	rcall	.-54     	; 0x7ebc <getch>
    7ef2:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
    7ef4:	e9 f7       	brne	.-6      	; 0x7ef0 <getNch+0x4>
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7ef6:	cf 91       	pop	r28
    7ef8:	ed cf       	rjmp	.-38     	; 0x7ed4 <verifySpace>

00007efa <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7efa:	e0 e6       	ldi	r30, 0x60	; 96
    7efc:	f0 e0       	ldi	r31, 0x00	; 0
    7efe:	98 e1       	ldi	r25, 0x18	; 24
    7f00:	90 83       	st	Z, r25
  WDTCSR = x;
    7f02:	80 83       	st	Z, r24
    7f04:	08 95       	ret

00007f06 <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f06:	e0 e6       	ldi	r30, 0x60	; 96
    7f08:	f0 e0       	ldi	r31, 0x00	; 0
    7f0a:	88 e1       	ldi	r24, 0x18	; 24
    7f0c:	80 83       	st	Z, r24
  WDTCSR = x;
    7f0e:	10 82       	st	Z, r1
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    7f10:	ee 27       	eor	r30, r30
    7f12:	ff 27       	eor	r31, r31
    7f14:	09 94       	ijmp
