
optiboot_atmega328pb_8mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00007800  00007800  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000288  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c3  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000178  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000451  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012d  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002eb  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <main>:
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    7800:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7802:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7804:	14 be       	out	0x34, r1	; 52
  //  LED_PORT |= _BV(LED);
  //}

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7806:	85 e0       	ldi	r24, 0x05	; 5
    7808:	80 93 81 00 	sts	0x0081, r24
#endif
#ifndef SOFT_UART
  // Turn on the pull-up resistor for RX.
  PORTD |= (1 << 0);
    780c:	58 9a       	sbi	0x0b, 0	; 11
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    780e:	82 e0       	ldi	r24, 0x02	; 2
    7810:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7814:	88 e1       	ldi	r24, 0x18	; 24
    7816:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    781a:	86 e0       	ldi	r24, 0x06	; 6
    781c:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7820:	80 e1       	ldi	r24, 0x10	; 16
    7822:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif
  // PIN_EN_TX to high
  DDRB |= _BV(PINB0);
    7826:	20 9a       	sbi	0x04, 0	; 4
  PORTB |= _BV(PINB0);
    7828:	28 9a       	sbi	0x05, 0	; 5
  //DDRB = DDRB  |  0x01;
  //PORTB = PORTB | 0x01; 

  // PIN_EN_RX to high
  DDRD |= _BV(PIND7);
    782a:	57 9a       	sbi	0x0a, 7	; 10
  PORTD |= _BV(PIND7);
    782c:	5f 9a       	sbi	0x0b, 7	; 11
  //DDRD = DDRD  |  0x80;
  //PORTD = PORTD | 0x80; 

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    782e:	8e e0       	ldi	r24, 0x0E	; 14
    7830:	bd d0       	rcall	.+378    	; 0x79ac <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7832:	56 9a       	sbi	0x0a, 6	; 10
    7834:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7836:	28 e1       	ldi	r18, 0x18	; 24
    7838:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    783a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    783c:	30 93 85 00 	sts	0x0085, r19
    7840:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7844:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7846:	b0 9b       	sbis	0x16, 0	; 22
    7848:	fe cf       	rjmp	.-4      	; 0x7846 <main+0x46>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    784a:	4e 9a       	sbi	0x09, 6	; 9
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    784c:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    784e:	81 50       	subi	r24, 0x01	; 1
    7850:	a9 f7       	brne	.-22     	; 0x783c <main+0x3c>
    7852:	cc 24       	eor	r12, r12
    7854:	dd 24       	eor	r13, r13
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7856:	88 24       	eor	r8, r8
    7858:	83 94       	inc	r8
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    785a:	b5 e0       	ldi	r27, 0x05	; 5
    785c:	ab 2e       	mov	r10, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    785e:	a1 e1       	ldi	r26, 0x11	; 17
    7860:	9a 2e       	mov	r9, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7862:	f3 e0       	ldi	r31, 0x03	; 3
    7864:	bf 2e       	mov	r11, r31
  //}

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7866:	ad d0       	rcall	.+346    	; 0x79c2 <getch>

    if(ch == STK_GET_PARAMETER) {
    7868:	81 34       	cpi	r24, 0x41	; 65
    786a:	61 f4       	brne	.+24     	; 0x7884 <main+0x84>
      unsigned char which = getch();
    786c:	aa d0       	rcall	.+340    	; 0x79c2 <getch>
    786e:	08 2f       	mov	r16, r24
      verifySpace();
    7870:	d1 d0       	rcall	.+418    	; 0x7a14 <verifySpace>
      if (which == 0x82) {
    7872:	02 38       	cpi	r16, 0x82	; 130
    7874:	11 f0       	breq	.+4      	; 0x787a <main+0x7a>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    7876:	01 38       	cpi	r16, 0x81	; 129
    7878:	11 f4       	brne	.+4      	; 0x787e <main+0x7e>
	  putch(OPTIBOOT_MAJVER);
    787a:	84 e0       	ldi	r24, 0x04	; 4
    787c:	01 c0       	rjmp	.+2      	; 0x7880 <main+0x80>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    787e:	83 e0       	ldi	r24, 0x03	; 3
    7880:	8d d0       	rcall	.+282    	; 0x799c <putch>
    7882:	89 c0       	rjmp	.+274    	; 0x7996 <main+0x196>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7884:	82 34       	cpi	r24, 0x42	; 66
    7886:	11 f4       	brne	.+4      	; 0x788c <main+0x8c>
      // SET DEVICE is ignored
      getNch(20);
    7888:	84 e1       	ldi	r24, 0x14	; 20
    788a:	03 c0       	rjmp	.+6      	; 0x7892 <main+0x92>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    788c:	85 34       	cpi	r24, 0x45	; 69
    788e:	19 f4       	brne	.+6      	; 0x7896 <main+0x96>
      // SET DEVICE EXT is ignored
      getNch(5);
    7890:	85 e0       	ldi	r24, 0x05	; 5
    7892:	c8 d0       	rcall	.+400    	; 0x7a24 <getNch>
    7894:	80 c0       	rjmp	.+256    	; 0x7996 <main+0x196>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7896:	85 35       	cpi	r24, 0x55	; 85
    7898:	79 f4       	brne	.+30     	; 0x78b8 <main+0xb8>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    789a:	93 d0       	rcall	.+294    	; 0x79c2 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    789c:	e8 2e       	mov	r14, r24
    789e:	ff 24       	eor	r15, r15
    78a0:	90 d0       	rcall	.+288    	; 0x79c2 <getch>
    78a2:	08 2f       	mov	r16, r24
    78a4:	10 e0       	ldi	r17, 0x00	; 0
    78a6:	10 2f       	mov	r17, r16
    78a8:	00 27       	eor	r16, r16
    78aa:	0e 29       	or	r16, r14
    78ac:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    78ae:	00 0f       	add	r16, r16
    78b0:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    78b2:	b0 d0       	rcall	.+352    	; 0x7a14 <verifySpace>
    78b4:	68 01       	movw	r12, r16
    78b6:	6f c0       	rjmp	.+222    	; 0x7996 <main+0x196>
    }
    else if(ch == STK_UNIVERSAL) {
    78b8:	86 35       	cpi	r24, 0x56	; 86
    78ba:	21 f4       	brne	.+8      	; 0x78c4 <main+0xc4>
      // UNIVERSAL command is ignored
      getNch(4);
    78bc:	84 e0       	ldi	r24, 0x04	; 4
    78be:	b2 d0       	rcall	.+356    	; 0x7a24 <getNch>
      putch(0x00);
    78c0:	80 e0       	ldi	r24, 0x00	; 0
    78c2:	de cf       	rjmp	.-68     	; 0x7880 <main+0x80>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    78c4:	84 36       	cpi	r24, 0x64	; 100
    78c6:	09 f0       	breq	.+2      	; 0x78ca <main+0xca>
    78c8:	40 c0       	rjmp	.+128    	; 0x794a <main+0x14a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    78ca:	7b d0       	rcall	.+246    	; 0x79c2 <getch>
      length = getch();
    78cc:	7a d0       	rcall	.+244    	; 0x79c2 <getch>
    78ce:	08 2f       	mov	r16, r24
      getch();
    78d0:	78 d0       	rcall	.+240    	; 0x79c2 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	c8 16       	cp	r12, r24
    78d6:	80 e7       	ldi	r24, 0x70	; 112
    78d8:	d8 06       	cpc	r13, r24
    78da:	18 f4       	brcc	.+6      	; 0x78e2 <main+0xe2>
    78dc:	f6 01       	movw	r30, r12
    78de:	b7 be       	out	0x37, r11	; 55
    78e0:	e8 95       	spm
    78e2:	c0 e0       	ldi	r28, 0x00	; 0
    78e4:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    78e6:	6d d0       	rcall	.+218    	; 0x79c2 <getch>
    78e8:	89 93       	st	Y+, r24
      while (--length);
    78ea:	0c 17       	cp	r16, r28
    78ec:	e1 f7       	brne	.-8      	; 0x78e6 <main+0xe6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    78ee:	f0 e0       	ldi	r31, 0x00	; 0
    78f0:	cf 16       	cp	r12, r31
    78f2:	f0 e7       	ldi	r31, 0x70	; 112
    78f4:	df 06       	cpc	r13, r31
    78f6:	18 f0       	brcs	.+6      	; 0x78fe <main+0xfe>
    78f8:	f6 01       	movw	r30, r12
    78fa:	b7 be       	out	0x37, r11	; 55
    78fc:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    78fe:	8a d0       	rcall	.+276    	; 0x7a14 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7900:	07 b6       	in	r0, 0x37	; 55
    7902:	00 fc       	sbrc	r0, 0
    7904:	fd cf       	rjmp	.-6      	; 0x7900 <main+0x100>
    7906:	a6 01       	movw	r20, r12
    7908:	a0 e0       	ldi	r26, 0x00	; 0
    790a:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    790c:	2c 91       	ld	r18, X
    790e:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7910:	11 96       	adiw	r26, 0x01	; 1
    7912:	8c 91       	ld	r24, X
    7914:	11 97       	sbiw	r26, 0x01	; 1
    7916:	90 e0       	ldi	r25, 0x00	; 0
    7918:	98 2f       	mov	r25, r24
    791a:	88 27       	eor	r24, r24
    791c:	82 2b       	or	r24, r18
    791e:	93 2b       	or	r25, r19
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    7920:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7922:	fa 01       	movw	r30, r20
    7924:	0c 01       	movw	r0, r24
    7926:	87 be       	out	0x37, r8	; 55
    7928:	e8 95       	spm
    792a:	11 24       	eor	r1, r1
        addrPtr += 2;
    792c:	4e 5f       	subi	r20, 0xFE	; 254
    792e:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    7930:	f1 e0       	ldi	r31, 0x01	; 1
    7932:	a0 38       	cpi	r26, 0x80	; 128
    7934:	bf 07       	cpc	r27, r31
    7936:	51 f7       	brne	.-44     	; 0x790c <main+0x10c>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7938:	f6 01       	movw	r30, r12
    793a:	a7 be       	out	0x37, r10	; 55
    793c:	e8 95       	spm
      boot_spm_busy_wait();
    793e:	07 b6       	in	r0, 0x37	; 55
    7940:	00 fc       	sbrc	r0, 0
    7942:	fd cf       	rjmp	.-6      	; 0x793e <main+0x13e>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7944:	97 be       	out	0x37, r9	; 55
    7946:	e8 95       	spm
    7948:	26 c0       	rjmp	.+76     	; 0x7996 <main+0x196>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    794a:	84 37       	cpi	r24, 0x74	; 116
    794c:	b1 f4       	brne	.+44     	; 0x797a <main+0x17a>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    794e:	39 d0       	rcall	.+114    	; 0x79c2 <getch>
      length = getch();
    7950:	38 d0       	rcall	.+112    	; 0x79c2 <getch>
    7952:	f8 2e       	mov	r15, r24
      getch();
    7954:	36 d0       	rcall	.+108    	; 0x79c2 <getch>

      verifySpace();
    7956:	5e d0       	rcall	.+188    	; 0x7a14 <verifySpace>
    7958:	f6 01       	movw	r30, r12
    795a:	ef 2c       	mov	r14, r15
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    795c:	8f 01       	movw	r16, r30
    795e:	0f 5f       	subi	r16, 0xFF	; 255
    7960:	1f 4f       	sbci	r17, 0xFF	; 255
    7962:	84 91       	lpm	r24, Z+
    7964:	1b d0       	rcall	.+54     	; 0x799c <putch>
      while (--length);
    7966:	ea 94       	dec	r14
    7968:	f8 01       	movw	r30, r16
    796a:	c1 f7       	brne	.-16     	; 0x795c <main+0x15c>
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    796c:	08 94       	sec
    796e:	c1 1c       	adc	r12, r1
    7970:	d1 1c       	adc	r13, r1
    7972:	fa 94       	dec	r15
    7974:	cf 0c       	add	r12, r15
    7976:	d1 1c       	adc	r13, r1
    7978:	0e c0       	rjmp	.+28     	; 0x7996 <main+0x196>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    797a:	85 37       	cpi	r24, 0x75	; 117
    797c:	39 f4       	brne	.+14     	; 0x798c <main+0x18c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    797e:	4a d0       	rcall	.+148    	; 0x7a14 <verifySpace>
      putch(SIGNATURE_0);
    7980:	8e e1       	ldi	r24, 0x1E	; 30
    7982:	0c d0       	rcall	.+24     	; 0x799c <putch>
      putch(SIGNATURE_1);
    7984:	85 e9       	ldi	r24, 0x95	; 149
    7986:	0a d0       	rcall	.+20     	; 0x799c <putch>
      putch(SIGNATURE_2);
    7988:	86 e1       	ldi	r24, 0x16	; 22
    798a:	7a cf       	rjmp	.-268    	; 0x7880 <main+0x80>
    }
    else if (ch == 'Q') {
    798c:	81 35       	cpi	r24, 0x51	; 81
    798e:	11 f4       	brne	.+4      	; 0x7994 <main+0x194>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7990:	88 e0       	ldi	r24, 0x08	; 8
    7992:	0c d0       	rcall	.+24     	; 0x79ac <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7994:	3f d0       	rcall	.+126    	; 0x7a14 <verifySpace>
    }
    putch(STK_OK);
    7996:	80 e1       	ldi	r24, 0x10	; 16
    7998:	01 d0       	rcall	.+2      	; 0x799c <putch>
    799a:	65 cf       	rjmp	.-310    	; 0x7866 <main+0x66>

0000799c <putch>:
  }
  //appStart();
}

void putch(char ch) {
    799c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    799e:	80 91 c0 00 	lds	r24, 0x00C0
    79a2:	85 ff       	sbrs	r24, 5
    79a4:	fc cf       	rjmp	.-8      	; 0x799e <putch+0x2>
  UDR0 = ch;
    79a6:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    79aa:	08 95       	ret

000079ac <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    79ac:	e0 e6       	ldi	r30, 0x60	; 96
    79ae:	f0 e0       	ldi	r31, 0x00	; 0
    79b0:	98 e1       	ldi	r25, 0x18	; 24
    79b2:	90 83       	st	Z, r25
  WDTCSR = x;
    79b4:	80 83       	st	Z, r24
}
    79b6:	08 95       	ret

000079b8 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    79b8:	80 e0       	ldi	r24, 0x00	; 0
    79ba:	f8 df       	rcall	.-16     	; 0x79ac <watchdogConfig>
  __asm__ __volatile__ (
    79bc:	ee 27       	eor	r30, r30
    79be:	ff 27       	eor	r31, r31
    79c0:	09 94       	ijmp

000079c2 <getch>:
      "r25"
  );
#endif
}

uint8_t getch(void) {
    79c2:	ef 92       	push	r14
    79c4:	ff 92       	push	r15
    79c6:	0f 93       	push	r16
    79c8:	1f 93       	push	r17

#ifdef LED_DATA_FLASH
#ifdef __AVR_ATmega8__
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    79ca:	4e 9a       	sbi	0x09, 6	; 9
    79cc:	ee 24       	eor	r14, r14
    79ce:	ff 24       	eor	r15, r15
    79d0:	87 01       	movw	r16, r14
    79d2:	0f c0       	rjmp	.+30     	; 0x79f2 <getch+0x30>
  //while(!(UCSR0A & _BV(RXC0)))
  //  ;
  #define MAX_TIME_COUNT (F_CPU>>4)
  uint32_t count = 0;
  while(!(UCSR0A & _BV(RXC0))) {
  	count++;
    79d4:	08 94       	sec
    79d6:	e1 1c       	adc	r14, r1
    79d8:	f1 1c       	adc	r15, r1
    79da:	01 1d       	adc	r16, r1
    79dc:	11 1d       	adc	r17, r1
		if (count > MAX_TIME_COUNT) {
    79de:	81 e2       	ldi	r24, 0x21	; 33
    79e0:	e8 16       	cp	r14, r24
    79e2:	81 ea       	ldi	r24, 0xA1	; 161
    79e4:	f8 06       	cpc	r15, r24
    79e6:	87 e0       	ldi	r24, 0x07	; 7
    79e8:	08 07       	cpc	r16, r24
    79ea:	80 e0       	ldi	r24, 0x00	; 0
    79ec:	18 07       	cpc	r17, r24
    79ee:	08 f0       	brcs	.+2      	; 0x79f2 <getch+0x30>
			appStart();
    79f0:	e3 df       	rcall	.-58     	; 0x79b8 <appStart>
#else
  //while(!(UCSR0A & _BV(RXC0)))
  //  ;
  #define MAX_TIME_COUNT (F_CPU>>4)
  uint32_t count = 0;
  while(!(UCSR0A & _BV(RXC0))) {
    79f2:	80 91 c0 00 	lds	r24, 0x00C0
    79f6:	87 ff       	sbrs	r24, 7
    79f8:	ed cf       	rjmp	.-38     	; 0x79d4 <getch+0x12>
		if (count > MAX_TIME_COUNT) {
			appStart();
	  }
  }

  if (!(UCSR0A & _BV(FE0))) {
    79fa:	80 91 c0 00 	lds	r24, 0x00C0
    79fe:	84 fd       	sbrc	r24, 4
    7a00:	01 c0       	rjmp	.+2      	; 0x7a04 <getch+0x42>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7a02:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7a04:	80 91 c6 00 	lds	r24, 0x00C6

#ifdef LED_DATA_FLASH
#ifdef __AVR_ATmega8__
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7a08:	4e 9a       	sbi	0x09, 6	; 9
#endif
#endif

  return ch;
}
    7a0a:	1f 91       	pop	r17
    7a0c:	0f 91       	pop	r16
    7a0e:	ff 90       	pop	r15
    7a10:	ef 90       	pop	r14
    7a12:	08 95       	ret

00007a14 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7a14:	d6 df       	rcall	.-84     	; 0x79c2 <getch>
    7a16:	80 32       	cpi	r24, 0x20	; 32
    7a18:	19 f0       	breq	.+6      	; 0x7a20 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7a1a:	88 e0       	ldi	r24, 0x08	; 8
    7a1c:	c7 df       	rcall	.-114    	; 0x79ac <watchdogConfig>
    7a1e:	ff cf       	rjmp	.-2      	; 0x7a1e <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7a20:	84 e1       	ldi	r24, 0x14	; 20
}
    7a22:	bc cf       	rjmp	.-136    	; 0x799c <putch>

00007a24 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7a24:	1f 93       	push	r17
    7a26:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7a28:	cc df       	rcall	.-104    	; 0x79c2 <getch>
    7a2a:	11 50       	subi	r17, 0x01	; 1
    7a2c:	e9 f7       	brne	.-6      	; 0x7a28 <getNch+0x4>
  verifySpace();
    7a2e:	f2 df       	rcall	.-28     	; 0x7a14 <verifySpace>
}
    7a30:	1f 91       	pop	r17
    7a32:	08 95       	ret
