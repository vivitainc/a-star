
optiboot_atmega328pb_8mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00007800  00007800  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  0000024a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002a8  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000178  00000000  00000000  0000057b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040d  00000000  00000000  000006f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d8  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <main>:
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    7800:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7802:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7804:	14 be       	out	0x34, r1	; 52
//  if ((ch & _BV(WDRF))) appStart();
  if (!(ch & _BV(EXTRF))) appStart();
    7806:	81 ff       	sbrs	r24, 1
    7808:	f1 d0       	rcall	.+482    	; 0x79ec <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    780a:	85 e0       	ldi	r24, 0x05	; 5
    780c:	80 93 81 00 	sts	0x0081, r24
#endif
#ifndef SOFT_UART
  // Turn on the pull-up resistor for RX.
  PORTD |= (1 << 0);
    7810:	58 9a       	sbi	0x0b, 0	; 11
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7812:	82 e0       	ldi	r24, 0x02	; 2
    7814:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7818:	88 e1       	ldi	r24, 0x18	; 24
    781a:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    781e:	86 e0       	ldi	r24, 0x06	; 6
    7820:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7824:	80 e1       	ldi	r24, 0x10	; 16
    7826:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    782a:	8e e0       	ldi	r24, 0x0E	; 14
    782c:	c9 d0       	rcall	.+402    	; 0x79c0 <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    782e:	25 9a       	sbi	0x04, 5	; 4
    7830:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7832:	28 e1       	ldi	r18, 0x18	; 24
    7834:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7836:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7838:	30 93 85 00 	sts	0x0085, r19
    783c:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7840:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7842:	b0 9b       	sbis	0x16, 0	; 22
    7844:	fe cf       	rjmp	.-4      	; 0x7842 <main+0x42>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7846:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7848:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    784a:	81 50       	subi	r24, 0x01	; 1
    784c:	a9 f7       	brne	.-22     	; 0x7838 <main+0x38>
    784e:	cc 24       	eor	r12, r12
    7850:	dd 24       	eor	r13, r13
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7852:	88 24       	eor	r8, r8
    7854:	83 94       	inc	r8
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7856:	b5 e0       	ldi	r27, 0x05	; 5
    7858:	ab 2e       	mov	r10, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    785a:	a1 e1       	ldi	r26, 0x11	; 17
    785c:	9a 2e       	mov	r9, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    785e:	f3 e0       	ldi	r31, 0x03	; 3
    7860:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7862:	a2 d0       	rcall	.+324    	; 0x79a8 <getch>

    if(ch == STK_GET_PARAMETER) {
    7864:	81 34       	cpi	r24, 0x41	; 65
    7866:	61 f4       	brne	.+24     	; 0x7880 <main+0x80>
      unsigned char which = getch();
    7868:	9f d0       	rcall	.+318    	; 0x79a8 <getch>
    786a:	08 2f       	mov	r16, r24
      verifySpace();
    786c:	af d0       	rcall	.+350    	; 0x79cc <verifySpace>
      if (which == 0x82) {
    786e:	02 38       	cpi	r16, 0x82	; 130
    7870:	11 f0       	breq	.+4      	; 0x7876 <main+0x76>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    7872:	01 38       	cpi	r16, 0x81	; 129
    7874:	11 f4       	brne	.+4      	; 0x787a <main+0x7a>
	  putch(OPTIBOOT_MAJVER);
    7876:	84 e0       	ldi	r24, 0x04	; 4
    7878:	01 c0       	rjmp	.+2      	; 0x787c <main+0x7c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    787a:	83 e0       	ldi	r24, 0x03	; 3
    787c:	8d d0       	rcall	.+282    	; 0x7998 <putch>
    787e:	89 c0       	rjmp	.+274    	; 0x7992 <main+0x192>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7880:	82 34       	cpi	r24, 0x42	; 66
    7882:	11 f4       	brne	.+4      	; 0x7888 <main+0x88>
      // SET DEVICE is ignored
      getNch(20);
    7884:	84 e1       	ldi	r24, 0x14	; 20
    7886:	03 c0       	rjmp	.+6      	; 0x788e <main+0x8e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7888:	85 34       	cpi	r24, 0x45	; 69
    788a:	19 f4       	brne	.+6      	; 0x7892 <main+0x92>
      // SET DEVICE EXT is ignored
      getNch(5);
    788c:	85 e0       	ldi	r24, 0x05	; 5
    788e:	a6 d0       	rcall	.+332    	; 0x79dc <getNch>
    7890:	80 c0       	rjmp	.+256    	; 0x7992 <main+0x192>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7892:	85 35       	cpi	r24, 0x55	; 85
    7894:	79 f4       	brne	.+30     	; 0x78b4 <main+0xb4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7896:	88 d0       	rcall	.+272    	; 0x79a8 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7898:	e8 2e       	mov	r14, r24
    789a:	ff 24       	eor	r15, r15
    789c:	85 d0       	rcall	.+266    	; 0x79a8 <getch>
    789e:	08 2f       	mov	r16, r24
    78a0:	10 e0       	ldi	r17, 0x00	; 0
    78a2:	10 2f       	mov	r17, r16
    78a4:	00 27       	eor	r16, r16
    78a6:	0e 29       	or	r16, r14
    78a8:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    78aa:	00 0f       	add	r16, r16
    78ac:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    78ae:	8e d0       	rcall	.+284    	; 0x79cc <verifySpace>
    78b0:	68 01       	movw	r12, r16
    78b2:	6f c0       	rjmp	.+222    	; 0x7992 <main+0x192>
    }
    else if(ch == STK_UNIVERSAL) {
    78b4:	86 35       	cpi	r24, 0x56	; 86
    78b6:	21 f4       	brne	.+8      	; 0x78c0 <main+0xc0>
      // UNIVERSAL command is ignored
      getNch(4);
    78b8:	84 e0       	ldi	r24, 0x04	; 4
    78ba:	90 d0       	rcall	.+288    	; 0x79dc <getNch>
      putch(0x00);
    78bc:	80 e0       	ldi	r24, 0x00	; 0
    78be:	de cf       	rjmp	.-68     	; 0x787c <main+0x7c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    78c0:	84 36       	cpi	r24, 0x64	; 100
    78c2:	09 f0       	breq	.+2      	; 0x78c6 <main+0xc6>
    78c4:	40 c0       	rjmp	.+128    	; 0x7946 <main+0x146>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    78c6:	70 d0       	rcall	.+224    	; 0x79a8 <getch>
      length = getch();
    78c8:	6f d0       	rcall	.+222    	; 0x79a8 <getch>
    78ca:	08 2f       	mov	r16, r24
      getch();
    78cc:	6d d0       	rcall	.+218    	; 0x79a8 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    78ce:	80 e0       	ldi	r24, 0x00	; 0
    78d0:	c8 16       	cp	r12, r24
    78d2:	80 e7       	ldi	r24, 0x70	; 112
    78d4:	d8 06       	cpc	r13, r24
    78d6:	18 f4       	brcc	.+6      	; 0x78de <main+0xde>
    78d8:	f6 01       	movw	r30, r12
    78da:	b7 be       	out	0x37, r11	; 55
    78dc:	e8 95       	spm
    78de:	c0 e0       	ldi	r28, 0x00	; 0
    78e0:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    78e2:	62 d0       	rcall	.+196    	; 0x79a8 <getch>
    78e4:	89 93       	st	Y+, r24
      while (--length);
    78e6:	0c 17       	cp	r16, r28
    78e8:	e1 f7       	brne	.-8      	; 0x78e2 <main+0xe2>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    78ea:	f0 e0       	ldi	r31, 0x00	; 0
    78ec:	cf 16       	cp	r12, r31
    78ee:	f0 e7       	ldi	r31, 0x70	; 112
    78f0:	df 06       	cpc	r13, r31
    78f2:	18 f0       	brcs	.+6      	; 0x78fa <main+0xfa>
    78f4:	f6 01       	movw	r30, r12
    78f6:	b7 be       	out	0x37, r11	; 55
    78f8:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    78fa:	68 d0       	rcall	.+208    	; 0x79cc <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    78fc:	07 b6       	in	r0, 0x37	; 55
    78fe:	00 fc       	sbrc	r0, 0
    7900:	fd cf       	rjmp	.-6      	; 0x78fc <main+0xfc>
    7902:	a6 01       	movw	r20, r12
    7904:	a0 e0       	ldi	r26, 0x00	; 0
    7906:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7908:	2c 91       	ld	r18, X
    790a:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    790c:	11 96       	adiw	r26, 0x01	; 1
    790e:	8c 91       	ld	r24, X
    7910:	11 97       	sbiw	r26, 0x01	; 1
    7912:	90 e0       	ldi	r25, 0x00	; 0
    7914:	98 2f       	mov	r25, r24
    7916:	88 27       	eor	r24, r24
    7918:	82 2b       	or	r24, r18
    791a:	93 2b       	or	r25, r19
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    791c:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    791e:	fa 01       	movw	r30, r20
    7920:	0c 01       	movw	r0, r24
    7922:	87 be       	out	0x37, r8	; 55
    7924:	e8 95       	spm
    7926:	11 24       	eor	r1, r1
        addrPtr += 2;
    7928:	4e 5f       	subi	r20, 0xFE	; 254
    792a:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    792c:	f1 e0       	ldi	r31, 0x01	; 1
    792e:	a0 38       	cpi	r26, 0x80	; 128
    7930:	bf 07       	cpc	r27, r31
    7932:	51 f7       	brne	.-44     	; 0x7908 <main+0x108>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7934:	f6 01       	movw	r30, r12
    7936:	a7 be       	out	0x37, r10	; 55
    7938:	e8 95       	spm
      boot_spm_busy_wait();
    793a:	07 b6       	in	r0, 0x37	; 55
    793c:	00 fc       	sbrc	r0, 0
    793e:	fd cf       	rjmp	.-6      	; 0x793a <main+0x13a>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7940:	97 be       	out	0x37, r9	; 55
    7942:	e8 95       	spm
    7944:	26 c0       	rjmp	.+76     	; 0x7992 <main+0x192>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7946:	84 37       	cpi	r24, 0x74	; 116
    7948:	b1 f4       	brne	.+44     	; 0x7976 <main+0x176>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    794a:	2e d0       	rcall	.+92     	; 0x79a8 <getch>
      length = getch();
    794c:	2d d0       	rcall	.+90     	; 0x79a8 <getch>
    794e:	f8 2e       	mov	r15, r24
      getch();
    7950:	2b d0       	rcall	.+86     	; 0x79a8 <getch>

      verifySpace();
    7952:	3c d0       	rcall	.+120    	; 0x79cc <verifySpace>
    7954:	f6 01       	movw	r30, r12
    7956:	ef 2c       	mov	r14, r15
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7958:	8f 01       	movw	r16, r30
    795a:	0f 5f       	subi	r16, 0xFF	; 255
    795c:	1f 4f       	sbci	r17, 0xFF	; 255
    795e:	84 91       	lpm	r24, Z+
    7960:	1b d0       	rcall	.+54     	; 0x7998 <putch>
      while (--length);
    7962:	ea 94       	dec	r14
    7964:	f8 01       	movw	r30, r16
    7966:	c1 f7       	brne	.-16     	; 0x7958 <main+0x158>
#undef SIGNATURE_2
#define SIGNATURE_2 0x16
#endif

/* main program starts here */
int main(void) {
    7968:	08 94       	sec
    796a:	c1 1c       	adc	r12, r1
    796c:	d1 1c       	adc	r13, r1
    796e:	fa 94       	dec	r15
    7970:	cf 0c       	add	r12, r15
    7972:	d1 1c       	adc	r13, r1
    7974:	0e c0       	rjmp	.+28     	; 0x7992 <main+0x192>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7976:	85 37       	cpi	r24, 0x75	; 117
    7978:	39 f4       	brne	.+14     	; 0x7988 <main+0x188>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    797a:	28 d0       	rcall	.+80     	; 0x79cc <verifySpace>
      putch(SIGNATURE_0);
    797c:	8e e1       	ldi	r24, 0x1E	; 30
    797e:	0c d0       	rcall	.+24     	; 0x7998 <putch>
      putch(SIGNATURE_1);
    7980:	85 e9       	ldi	r24, 0x95	; 149
    7982:	0a d0       	rcall	.+20     	; 0x7998 <putch>
      putch(SIGNATURE_2);
    7984:	86 e1       	ldi	r24, 0x16	; 22
    7986:	7a cf       	rjmp	.-268    	; 0x787c <main+0x7c>
    }
    else if (ch == 'Q') {
    7988:	81 35       	cpi	r24, 0x51	; 81
    798a:	11 f4       	brne	.+4      	; 0x7990 <main+0x190>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    798c:	88 e0       	ldi	r24, 0x08	; 8
    798e:	18 d0       	rcall	.+48     	; 0x79c0 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7990:	1d d0       	rcall	.+58     	; 0x79cc <verifySpace>
    }
    putch(STK_OK);
    7992:	80 e1       	ldi	r24, 0x10	; 16
    7994:	01 d0       	rcall	.+2      	; 0x7998 <putch>
    7996:	65 cf       	rjmp	.-310    	; 0x7862 <main+0x62>

00007998 <putch>:
  }
}

void putch(char ch) {
    7998:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    799a:	80 91 c0 00 	lds	r24, 0x00C0
    799e:	85 ff       	sbrs	r24, 5
    79a0:	fc cf       	rjmp	.-8      	; 0x799a <putch+0x2>
  UDR0 = ch;
    79a2:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    79a6:	08 95       	ret

000079a8 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    79a8:	80 91 c0 00 	lds	r24, 0x00C0
    79ac:	87 ff       	sbrs	r24, 7
    79ae:	fc cf       	rjmp	.-8      	; 0x79a8 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    79b0:	80 91 c0 00 	lds	r24, 0x00C0
    79b4:	84 fd       	sbrc	r24, 4
    79b6:	01 c0       	rjmp	.+2      	; 0x79ba <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    79b8:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    79ba:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    79be:	08 95       	ret

000079c0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    79c0:	e0 e6       	ldi	r30, 0x60	; 96
    79c2:	f0 e0       	ldi	r31, 0x00	; 0
    79c4:	98 e1       	ldi	r25, 0x18	; 24
    79c6:	90 83       	st	Z, r25
  WDTCSR = x;
    79c8:	80 83       	st	Z, r24
}
    79ca:	08 95       	ret

000079cc <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    79cc:	ed df       	rcall	.-38     	; 0x79a8 <getch>
    79ce:	80 32       	cpi	r24, 0x20	; 32
    79d0:	19 f0       	breq	.+6      	; 0x79d8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    79d2:	88 e0       	ldi	r24, 0x08	; 8
    79d4:	f5 df       	rcall	.-22     	; 0x79c0 <watchdogConfig>
    79d6:	ff cf       	rjmp	.-2      	; 0x79d6 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    79d8:	84 e1       	ldi	r24, 0x14	; 20
}
    79da:	de cf       	rjmp	.-68     	; 0x7998 <putch>

000079dc <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    79dc:	1f 93       	push	r17
    79de:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    79e0:	e3 df       	rcall	.-58     	; 0x79a8 <getch>
    79e2:	11 50       	subi	r17, 0x01	; 1
    79e4:	e9 f7       	brne	.-6      	; 0x79e0 <getNch+0x4>
  verifySpace();
    79e6:	f2 df       	rcall	.-28     	; 0x79cc <verifySpace>
}
    79e8:	1f 91       	pop	r17
    79ea:	08 95       	ret

000079ec <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    79ec:	80 e0       	ldi	r24, 0x00	; 0
    79ee:	e8 df       	rcall	.-48     	; 0x79c0 <watchdogConfig>
  __asm__ __volatile__ (
    79f0:	ee 27       	eor	r30, r30
    79f2:	ff 27       	eor	r31, r31
    79f4:	09 94       	ijmp
